// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AchievementAdded extends ethereum.Event {
  get params(): AchievementAdded__Params {
    return new AchievementAdded__Params(this);
  }
}

export class AchievementAdded__Params {
  _event: AchievementAdded;

  constructor(event: AchievementAdded) {
    this._event = event;
  }

  get achievementId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }

  get locked(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AchievementBatchRewarded extends ethereum.Event {
  get params(): AchievementBatchRewarded__Params {
    return new AchievementBatchRewarded__Params(this);
  }
}

export class AchievementBatchRewarded__Params {
  _event: AchievementBatchRewarded;

  constructor(event: AchievementBatchRewarded) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get achievementIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class AchievementContractCreated extends ethereum.Event {
  get params(): AchievementContractCreated__Params {
    return new AchievementContractCreated__Params(this);
  }
}

export class AchievementContractCreated__Params {
  _event: AchievementContractCreated;

  constructor(event: AchievementContractCreated) {
    this._event = event;
  }

  get achievementContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creationTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AchievementRewarded extends ethereum.Event {
  get params(): AchievementRewarded__Params {
    return new AchievementRewarded__Params(this);
  }
}

export class AchievementRewarded__Params {
  _event: AchievementRewarded;

  constructor(event: AchievementRewarded) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get achievementId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GroupUpdated extends ethereum.Event {
  get params(): GroupUpdated__Params {
    return new GroupUpdated__Params(this);
  }
}

export class GroupUpdated__Params {
  _event: GroupUpdated;

  constructor(event: GroupUpdated) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get image(): string {
    return this._event.parameters[1].value.toString();
  }

  get details(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class MemberCreated extends ethereum.Event {
  get params(): MemberCreated__Params {
    return new MemberCreated__Params(this);
  }
}

export class MemberCreated__Params {
  _event: MemberCreated;

  constructor(event: MemberCreated) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenboundAccount(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MemberDeleted extends ethereum.Event {
  get params(): MemberDeleted__Params {
    return new MemberDeleted__Params(this);
  }
}

export class MemberDeleted__Params {
  _event: MemberDeleted;

  constructor(event: MemberDeleted) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewRoleAdded extends ethereum.Event {
  get params(): NewRoleAdded__Params {
    return new NewRoleAdded__Params(this);
  }
}

export class NewRoleAdded__Params {
  _event: NewRoleAdded;

  constructor(event: NewRoleAdded) {
    this._event = event;
  }

  get roleName(): string {
    return this._event.parameters[0].value.toString();
  }

  get newRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get admin(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GroupToken extends ethereum.SmartContract {
  static bind(address: Address): GroupToken {
    return new GroupToken("GroupToken", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC6551AccountImplementation(): Address {
    let result = super.call(
      "ERC6551AccountImplementation",
      "ERC6551AccountImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ERC6551AccountImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ERC6551AccountImplementation",
      "ERC6551AccountImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ERC6551Registry(): Address {
    let result = super.call(
      "ERC6551Registry",
      "ERC6551Registry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ERC6551Registry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ERC6551Registry",
      "ERC6551Registry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  achievementContract(): Address {
    let result = super.call(
      "achievementContract",
      "achievementContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_achievementContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "achievementContract",
      "achievementContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  details(): string {
    let result = super.call("details", "details():(string)", []);

    return result[0].toString();
  }

  try_details(): ethereum.CallResult<string> {
    let result = super.tryCall("details", "details():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTBA(_tokenId: BigInt): Address {
    let result = super.call("getTBA", "getTBA(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getTBA(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getTBA", "getTBA(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ERC6551Registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ERC6551AccountImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _details(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAchievementCall extends ethereum.Call {
  get inputs(): AddAchievementCall__Inputs {
    return new AddAchievementCall__Inputs(this);
  }

  get outputs(): AddAchievementCall__Outputs {
    return new AddAchievementCall__Outputs(this);
  }
}

export class AddAchievementCall__Inputs {
  _call: AddAchievementCall;

  constructor(call: AddAchievementCall) {
    this._call = call;
  }

  get _description(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _locked(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddAchievementCall__Outputs {
  _call: AddAchievementCall;

  constructor(call: AddAchievementCall) {
    this._call = call;
  }
}

export class AddNewRoleCall extends ethereum.Call {
  get inputs(): AddNewRoleCall__Inputs {
    return new AddNewRoleCall__Inputs(this);
  }

  get outputs(): AddNewRoleCall__Outputs {
    return new AddNewRoleCall__Outputs(this);
  }
}

export class AddNewRoleCall__Inputs {
  _call: AddNewRoleCall;

  constructor(call: AddNewRoleCall) {
    this._call = call;
  }

  get newRole(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddNewRoleCall__Outputs {
  _call: AddNewRoleCall;

  constructor(call: AddNewRoleCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchDistibuteAchievementsCall extends ethereum.Call {
  get inputs(): BatchDistibuteAchievementsCall__Inputs {
    return new BatchDistibuteAchievementsCall__Inputs(this);
  }

  get outputs(): BatchDistibuteAchievementsCall__Outputs {
    return new BatchDistibuteAchievementsCall__Outputs(this);
  }
}

export class BatchDistibuteAchievementsCall__Inputs {
  _call: BatchDistibuteAchievementsCall;

  constructor(call: BatchDistibuteAchievementsCall) {
    this._call = call;
  }

  get _achievementIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BatchDistibuteAchievementsCall__Outputs {
  _call: BatchDistibuteAchievementsCall;

  constructor(call: BatchDistibuteAchievementsCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CreateMemberCall extends ethereum.Call {
  get inputs(): CreateMemberCall__Inputs {
    return new CreateMemberCall__Inputs(this);
  }

  get outputs(): CreateMemberCall__Outputs {
    return new CreateMemberCall__Outputs(this);
  }
}

export class CreateMemberCall__Inputs {
  _call: CreateMemberCall;

  constructor(call: CreateMemberCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateMemberCall__Outputs {
  _call: CreateMemberCall;

  constructor(call: CreateMemberCall) {
    this._call = call;
  }
}

export class DeleteMemberCall extends ethereum.Call {
  get inputs(): DeleteMemberCall__Inputs {
    return new DeleteMemberCall__Inputs(this);
  }

  get outputs(): DeleteMemberCall__Outputs {
    return new DeleteMemberCall__Outputs(this);
  }
}

export class DeleteMemberCall__Inputs {
  _call: DeleteMemberCall;

  constructor(call: DeleteMemberCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteMemberCall__Outputs {
  _call: DeleteMemberCall;

  constructor(call: DeleteMemberCall) {
    this._call = call;
  }
}

export class DistributeAchievementCall extends ethereum.Call {
  get inputs(): DistributeAchievementCall__Inputs {
    return new DistributeAchievementCall__Inputs(this);
  }

  get outputs(): DistributeAchievementCall__Outputs {
    return new DistributeAchievementCall__Outputs(this);
  }
}

export class DistributeAchievementCall__Inputs {
  _call: DistributeAchievementCall;

  constructor(call: DistributeAchievementCall) {
    this._call = call;
  }

  get _achievementId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DistributeAchievementCall__Outputs {
  _call: DistributeAchievementCall;

  constructor(call: DistributeAchievementCall) {
    this._call = call;
  }
}

export class GrantMemberRoleCall extends ethereum.Call {
  get inputs(): GrantMemberRoleCall__Inputs {
    return new GrantMemberRoleCall__Inputs(this);
  }

  get outputs(): GrantMemberRoleCall__Outputs {
    return new GrantMemberRoleCall__Outputs(this);
  }
}

export class GrantMemberRoleCall__Inputs {
  _call: GrantMemberRoleCall;

  constructor(call: GrantMemberRoleCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class GrantMemberRoleCall__Outputs {
  _call: GrantMemberRoleCall;

  constructor(call: GrantMemberRoleCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeMemberRoleCall extends ethereum.Call {
  get inputs(): RevokeMemberRoleCall__Inputs {
    return new RevokeMemberRoleCall__Inputs(this);
  }

  get outputs(): RevokeMemberRoleCall__Outputs {
    return new RevokeMemberRoleCall__Outputs(this);
  }
}

export class RevokeMemberRoleCall__Inputs {
  _call: RevokeMemberRoleCall;

  constructor(call: RevokeMemberRoleCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RevokeMemberRoleCall__Outputs {
  _call: RevokeMemberRoleCall;

  constructor(call: RevokeMemberRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateDetailsCall extends ethereum.Call {
  get inputs(): UpdateDetailsCall__Inputs {
    return new UpdateDetailsCall__Inputs(this);
  }

  get outputs(): UpdateDetailsCall__Outputs {
    return new UpdateDetailsCall__Outputs(this);
  }
}

export class UpdateDetailsCall__Inputs {
  _call: UpdateDetailsCall;

  constructor(call: UpdateDetailsCall) {
    this._call = call;
  }

  get _details(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateDetailsCall__Outputs {
  _call: UpdateDetailsCall;

  constructor(call: UpdateDetailsCall) {
    this._call = call;
  }
}
